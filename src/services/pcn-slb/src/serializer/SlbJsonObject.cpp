/**
* slb API generated from slb.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "SlbJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

SlbJsonObject::SlbJsonObject() {
  m_nameIsSet = false;
  m_channelLocIsSet = false;
  m_channelLenIsSet = false;
}

SlbJsonObject::SlbJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_channelLocIsSet = false;
  m_channelLenIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("channel-loc")) {
    setChannelLoc(string_to_SlbChannelLocEnum(val.at("channel-loc").get<std::string>()));
  }

  if (val.count("channel-len")) {
    setChannelLen(val.at("channel-len").get<uint8_t>());
  }
}

nlohmann::json SlbJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_channelLocIsSet) {
    val["channel-loc"] = SlbChannelLocEnum_to_string(m_channelLoc);
  }

  if (m_channelLenIsSet) {
    val["channel-len"] = m_channelLen;
  }

  return val;
}

std::string SlbJsonObject::getName() const {
  return m_name;
}

void SlbJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool SlbJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



SlbChannelLocEnum SlbJsonObject::getChannelLoc() const {
  return m_channelLoc;
}

void SlbJsonObject::setChannelLoc(SlbChannelLocEnum value) {
  m_channelLoc = value;
  m_channelLocIsSet = true;
}

bool SlbJsonObject::channelLocIsSet() const {
  return m_channelLocIsSet;
}

void SlbJsonObject::unsetChannelLoc() {
  m_channelLocIsSet = false;
}

std::string SlbJsonObject::SlbChannelLocEnum_to_string(const SlbChannelLocEnum &value){
  switch(value) {
    case SlbChannelLocEnum::MSB:
      return std::string("msb");
    case SlbChannelLocEnum::LSB:
      return std::string("lsb");
    default:
      throw std::runtime_error("Bad Slb channelLoc");
  }
}

SlbChannelLocEnum SlbJsonObject::string_to_SlbChannelLocEnum(const std::string &str){
  if (JsonObjectBase::iequals("msb", str))
    return SlbChannelLocEnum::MSB;
  if (JsonObjectBase::iequals("lsb", str))
    return SlbChannelLocEnum::LSB;
  throw std::runtime_error("Slb channelLoc is invalid");
}
uint8_t SlbJsonObject::getChannelLen() const {
  return m_channelLen;
}

void SlbJsonObject::setChannelLen(uint8_t value) {
  m_channelLen = value;
  m_channelLenIsSet = true;
}

bool SlbJsonObject::channelLenIsSet() const {
  return m_channelLenIsSet;
}

void SlbJsonObject::unsetChannelLen() {
  m_channelLenIsSet = false;
}


}
}
}

