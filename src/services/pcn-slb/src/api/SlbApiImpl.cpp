/**
* slb API generated from slb.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "SlbApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace SlbApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Slb>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Slb> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_slb_by_id(const std::string &name, const SlbJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Slb>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<Slb>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_slb_by_id(const std::string &name, const SlbJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_slb_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<SlbJsonObject> read_slb_list_by_id() {
  std::vector<SlbJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_slb_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
* @brief   Read slb by ID
*
* Read operation of resource: slb*
*
* @param[in] name ID of name
*
* Responses:
* SlbJsonObject
*/
SlbJsonObject
read_slb_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}

/**
* @brief   Read channel-len by ID
*
* Read operation of resource: channel-len*
*
* @param[in] name ID of name
*
* Responses:
* uint8_t
*/
uint8_t
read_slb_channel_len_by_id(const std::string &name) {
  auto slb = get_cube(name);
  return slb->getChannelLen();

}

/**
* @brief   Read channel-loc by ID
*
* Read operation of resource: channel-loc*
*
* @param[in] name ID of name
*
* Responses:
* SlbChannelLocEnum
*/
SlbChannelLocEnum
read_slb_channel_loc_by_id(const std::string &name) {
  auto slb = get_cube(name);
  return slb->getChannelLoc();

}

/**
* @brief   Update slb by ID
*
* Update operation of resource: slb*
*
* @param[in] name ID of name
* @param[in] value slbbody object
*
* Responses:
*
*/
void
update_slb_by_id(const std::string &name, const SlbJsonObject &value) {
  auto slb = get_cube(name);

  return slb->update(value);
}

/**
* @brief   Update channel-len by ID
*
* Update operation of resource: channel-len*
*
* @param[in] name ID of name
* @param[in] value number of bits used for channel
*
* Responses:
*
*/
void
update_slb_channel_len_by_id(const std::string &name, const uint8_t &value) {
  auto slb = get_cube(name);

  return slb->setChannelLen(value);
}

/**
* @brief   Update channel-loc by ID
*
* Update operation of resource: channel-loc*
*
* @param[in] name ID of name
* @param[in] value where the channel info located? Default is LSB.
*
* Responses:
*
*/
void
update_slb_channel_loc_by_id(const std::string &name, const SlbChannelLocEnum &value) {
  auto slb = get_cube(name);

  return slb->setChannelLoc(value);
}

/**
* @brief   Update slb by ID
*
* Update operation of resource: slb*
*
* @param[in] value slbbody object
*
* Responses:
*
*/
void
update_slb_list_by_id(const std::vector<SlbJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}



/*
 * help related
 */


}

}
}
}

