/**
* dynmon API generated from dynmon.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "DynmonJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

DynmonJsonObject::DynmonJsonObject() {
  m_nameIsSet = false;
  m_dataplaneIsSet = false;
  m_metricsIsSet = false;
  m_openMetricsIsSet = false;
}

DynmonJsonObject::DynmonJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_dataplaneIsSet = false;
  m_metricsIsSet = false;
  m_openMetricsIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("dataplane")) {
    if (!val["dataplane"].is_null()) {
      DataplaneJsonObject newItem { val["dataplane"] };
      setDataplane(newItem);
    }
  }

  if (val.count("metrics")) {
    for (auto& item : val["metrics"]) {
      MetricsJsonObject newItem{ item };
      m_metrics.push_back(newItem);
    }

    m_metricsIsSet = true;
  }

  if (val.count("open-metrics")) {
    setOpenMetrics(val.at("open-metrics").get<std::string>());
  }
}

nlohmann::json DynmonJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_dataplaneIsSet) {
    val["dataplane"] = JsonObjectBase::toJson(m_dataplane);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_metrics) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["metrics"] = jsonArray;
    }
  }

  if (m_openMetricsIsSet) {
    val["open-metrics"] = m_openMetrics;
  }

  return val;
}

std::string DynmonJsonObject::getName() const {
  return m_name;
}

void DynmonJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool DynmonJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



DataplaneJsonObject DynmonJsonObject::getDataplane() const {
  return m_dataplane;
}

void DynmonJsonObject::setDataplane(DataplaneJsonObject value) {
  m_dataplane = value;
  m_dataplaneIsSet = true;
}

bool DynmonJsonObject::dataplaneIsSet() const {
  return m_dataplaneIsSet;
}

void DynmonJsonObject::unsetDataplane() {
  m_dataplaneIsSet = false;
}

const std::vector<MetricsJsonObject>& DynmonJsonObject::getMetrics() const{
  return m_metrics;
}

void DynmonJsonObject::addMetrics(MetricsJsonObject value) {
  m_metrics.push_back(value);
  m_metricsIsSet = true;
}


bool DynmonJsonObject::metricsIsSet() const {
  return m_metricsIsSet;
}

void DynmonJsonObject::unsetMetrics() {
  m_metricsIsSet = false;
}

std::string DynmonJsonObject::getOpenMetrics() const {
  return m_openMetrics;
}

void DynmonJsonObject::setOpenMetrics(std::string value) {
  m_openMetrics = value;
  m_openMetricsIsSet = true;
}

bool DynmonJsonObject::openMetricsIsSet() const {
  return m_openMetricsIsSet;
}

void DynmonJsonObject::unsetOpenMetrics() {
  m_openMetricsIsSet = false;
}


}
}
}

