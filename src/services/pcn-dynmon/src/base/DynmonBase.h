/**
* dynmon API generated from dynmon.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* DynmonBase.h
*
*
*/

#pragma once

#include "../serializer/DynmonJsonObject.h"

#include "../Dataplane.h"
#include "../Metrics.h"

#include "polycube/services/transparent_cube.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class DynmonBase: public virtual polycube::service::TransparentCube {
 public:
  DynmonBase(const std::string name);
  
  virtual ~DynmonBase();
  virtual void update(const DynmonJsonObject &conf);
  virtual DynmonJsonObject toJsonObject();

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<Dataplane> getDataplane() = 0;
  virtual void addDataplane(const DataplaneJsonObject &value) = 0;
  virtual void replaceDataplane(const DataplaneJsonObject &conf);
  virtual void delDataplane() = 0;

  /// <summary>
  /// Collected metrics
  /// </summary>
  virtual std::shared_ptr<Metrics> getMetrics(const std::string &name) = 0;
  virtual std::vector<std::shared_ptr<Metrics>> getMetricsList() = 0;
  virtual void addMetrics(const std::string &name, const MetricsJsonObject &conf) = 0;
  virtual void addMetricsList(const std::vector<MetricsJsonObject> &conf);
  virtual void replaceMetrics(const std::string &name, const MetricsJsonObject &conf);
  virtual void delMetrics(const std::string &name) = 0;
  virtual void delMetricsList();

  /// <summary>
  /// Collected metrics in OpenMetrics Format
  /// </summary>
  virtual std::string getOpenMetrics() = 0;
};
