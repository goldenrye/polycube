/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* FiltersJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  FiltersJsonObject : public JsonObjectBase {
public:
  FiltersJsonObject();
  FiltersJsonObject(const nlohmann::json &json);
  ~FiltersJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Snapshot length
  /// </summary>
  uint32_t getSnaplen() const;
  void setSnaplen(uint32_t value);
  bool snaplenIsSet() const;
  void unsetSnaplen();

  /// <summary>
  /// IP source filter
  /// </summary>
  std::string getSrc() const;
  void setSrc(std::string value);
  bool srcIsSet() const;
  void unsetSrc();

  /// <summary>
  /// IP destination filter
  /// </summary>
  std::string getDst() const;
  void setDst(std::string value);
  bool dstIsSet() const;
  void unsetDst();

  /// <summary>
  /// Level 4 protocol filter
  /// </summary>
  std::string getL4proto() const;
  void setL4proto(std::string value);
  bool l4protoIsSet() const;
  void unsetL4proto();

  /// <summary>
  /// Source port filter
  /// </summary>
  uint16_t getSport() const;
  void setSport(uint16_t value);
  bool sportIsSet() const;
  void unsetSport();

  /// <summary>
  /// Destination port filter
  /// </summary>
  uint16_t getDport() const;
  void setDport(uint16_t value);
  bool dportIsSet() const;
  void unsetDport();

private:
  uint32_t m_snaplen;
  bool m_snaplenIsSet;
  std::string m_src;
  bool m_srcIsSet;
  std::string m_dst;
  bool m_dstIsSet;
  std::string m_l4proto;
  bool m_l4protoIsSet;
  uint16_t m_sport;
  bool m_sportIsSet;
  uint16_t m_dport;
  bool m_dportIsSet;
};

}
}
}

