/**
* packetcapture API generated from packetcapture.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* FiltersBase.h
*
*
*/

#pragma once

#include "../serializer/FiltersJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Packetcapture;

class FiltersBase {
 public:
  
  FiltersBase(Packetcapture &parent);
  
  virtual ~FiltersBase();
  virtual void update(const FiltersJsonObject &conf);
  virtual FiltersJsonObject toJsonObject();

  /// <summary>
  /// Snapshot length
  /// </summary>
  virtual uint32_t getSnaplen() = 0;
  virtual void setSnaplen(const uint32_t &value) = 0;

  /// <summary>
  /// IP source filter
  /// </summary>
  virtual std::string getSrc() = 0;
  virtual void setSrc(const std::string &value) = 0;

  /// <summary>
  /// IP destination filter
  /// </summary>
  virtual std::string getDst() = 0;
  virtual void setDst(const std::string &value) = 0;

  /// <summary>
  /// Level 4 protocol filter
  /// </summary>
  virtual std::string getL4proto() = 0;
  virtual void setL4proto(const std::string &value) = 0;

  /// <summary>
  /// Source port filter
  /// </summary>
  virtual uint16_t getSport() = 0;
  virtual void setSport(const uint16_t &value) = 0;

  /// <summary>
  /// Destination port filter
  /// </summary>
  virtual uint16_t getDport() = 0;
  virtual void setDport(const uint16_t &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Packetcapture &parent_;
};
